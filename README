Inspired on: Daiz's AutoMKVChapters, TheFluff's split_aud, BD_Chapters

Needs: Python 3.1; MkvToolNix

What it does (for now):

    Reads the first line of uncommented Trims from an .avs;
    Uses timecodes files to get each trim's frame's timestamp;
    Offsets the trims accordingly;
    Creates a basic xml with Matroska chapters, x264 chapters if ending in 'x264.txt' or OGM chapters if any other extension is used;
    Creates a qpfile to use with x264;
    Cuts and merges audio (as per split_aud, only using v2 timecodes instead of expecting cfr) (all options work as split_aud);
    No longer needs tcConv but converts v1 timecodes to v2 internally;
    If requested, can output v2 timecodes from v1 and fps parsing. If --ofps is being used, v2 timecodes will use it.;
    Can output a qpfile with converted frames meant to be used for an ivtc'd encode using non-ivtc'd frames (feature inspired by automkvchapters) (not completely accurate, obviously);
    Using FFmpegsource's CorrectNTSCRationalFramerate, this is actually more precise in the v2 timecodes it produces than tcConv.

Only the .avs with trims is required for vfr.py to run. You can use -v and/or --test to debug the script. All other options and arguments are optional.

Usage:

vfr.py -i audio.aac -o audio.cut.mka -f 30/1.001 -t timecodes.txt -l tRim -c chapters.xml \
-n chnames.txt -q qpfile.qpf -vmr --ofps 24/1.001 --otimecodes v2.txt --test trims.avs outtrims.avs

Required:
trims.avs = Gets first uncommented line starting with trims from this Avisynth script

Optional:
-i = Audio to be cut (takes whatever mkvmerge takes)
-o = Cut audio inside .mka
     Default: input.cut.mka
-f = Frames per second (takes "25", "24000/1001", "30000:1001", "24/1.001" and "30:1.001" as input)
     Default: 30000/1001
-t = v1 or v2 timecodes file for vfr capabilities
     Default: -f
-l = Look for a trim() statement only on lines starting with LABEL, interpreted as a regular expression.
     Default: case insensitive trim
-c = Chapters file. If extension is 'xml', outputs MKV Chapters;
     if extension is 'x264.txt', outputs x264 Chapters; else, outputs OGM Chapters
-n = Text file with chapter names, one per line; assumed to be UTF-8 without BOM
-q = QPFile for use in x264; will use --ofps frames
-v = Verbose mode
-m = Merge split audio files
-r = Remove split audio files after merging
--ofps = Output FPS (used in qpfile, v2 timecodes and avs export)
         Default: -f
--otimecodes = Output v2 timecodes (from fps and v1 parsing) (if using --ofps, outputs v2 timecodes using this)
--test = Test Mode (doesn't create new files)
outtrims.avs = If chapparse.py is present, outputs .avs with offset and converted trims

To do:
- accept template files to help with ordered chapters (as automkvchapters)
- optimize code and/or improve its legibility
